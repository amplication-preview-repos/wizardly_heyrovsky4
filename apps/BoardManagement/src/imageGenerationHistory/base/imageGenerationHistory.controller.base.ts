/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ImageGenerationHistoryService } from "../imageGenerationHistory.service";
import { ImageGenerationHistoryCreateInput } from "./ImageGenerationHistoryCreateInput";
import { ImageGenerationHistory } from "./ImageGenerationHistory";
import { ImageGenerationHistoryFindManyArgs } from "./ImageGenerationHistoryFindManyArgs";
import { ImageGenerationHistoryWhereUniqueInput } from "./ImageGenerationHistoryWhereUniqueInput";
import { ImageGenerationHistoryUpdateInput } from "./ImageGenerationHistoryUpdateInput";

export class ImageGenerationHistoryControllerBase {
  constructor(protected readonly service: ImageGenerationHistoryService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ImageGenerationHistory })
  async createImageGenerationHistory(
    @common.Body() data: ImageGenerationHistoryCreateInput
  ): Promise<ImageGenerationHistory> {
    return await this.service.createImageGenerationHistory({
      data: data,
      select: {
        createdAt: true,
        generatedImageUrl: true,
        id: true,
        parametersUsed: true,
        promptDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ImageGenerationHistory] })
  @ApiNestedQuery(ImageGenerationHistoryFindManyArgs)
  async imageGenerationHistories(
    @common.Req() request: Request
  ): Promise<ImageGenerationHistory[]> {
    const args = plainToClass(
      ImageGenerationHistoryFindManyArgs,
      request.query
    );
    return this.service.imageGenerationHistories({
      ...args,
      select: {
        createdAt: true,
        generatedImageUrl: true,
        id: true,
        parametersUsed: true,
        promptDescription: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ImageGenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async imageGenerationHistory(
    @common.Param() params: ImageGenerationHistoryWhereUniqueInput
  ): Promise<ImageGenerationHistory | null> {
    const result = await this.service.imageGenerationHistory({
      where: params,
      select: {
        createdAt: true,
        generatedImageUrl: true,
        id: true,
        parametersUsed: true,
        promptDescription: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ImageGenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateImageGenerationHistory(
    @common.Param() params: ImageGenerationHistoryWhereUniqueInput,
    @common.Body() data: ImageGenerationHistoryUpdateInput
  ): Promise<ImageGenerationHistory | null> {
    try {
      return await this.service.updateImageGenerationHistory({
        where: params,
        data: data,
        select: {
          createdAt: true,
          generatedImageUrl: true,
          id: true,
          parametersUsed: true,
          promptDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ImageGenerationHistory })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteImageGenerationHistory(
    @common.Param() params: ImageGenerationHistoryWhereUniqueInput
  ): Promise<ImageGenerationHistory | null> {
    try {
      return await this.service.deleteImageGenerationHistory({
        where: params,
        select: {
          createdAt: true,
          generatedImageUrl: true,
          id: true,
          parametersUsed: true,
          promptDescription: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
